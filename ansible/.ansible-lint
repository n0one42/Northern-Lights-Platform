---
# Northern-Lights-Platform/ansible/.ansible-lint
# Enterprise-grade Ansible linting configuration
# This ensures consistent, high-quality Ansible code across the organization

# Use the "production" profile for strictest rules in enterprise environments
profile: production

# Rules to warn about (won't fail CI/CD but will show warnings)
warn_list:
  - fqcn-builtins # Encourage FQCN but don't enforce strictly
  - unnamed-task # Tasks should be named but not a blocker
  - yaml[comments] # Comment formatting warnings

# Rules we consciously skip for practical reasons
skip_list:
  - yaml[line-length] # Delegated to yamllint with 120 char limit
  - var-naming[no-role-prefix] # Allow flexibility in variable naming
  - name[template] # Allow flexibility in template naming
  - yaml[comments-indentation]

# # Enterprise-specific rules to enforce
enable_list:
  - args # Ensure proper module argument formatting
  - fqcn[action] # Enforce fully qualified collection names
  - schema[inventory] # Enforce inventory schema validation
  - schema[playbook] # Enforce playbook schema validation
  - schema[tasks] # Enforce task schema validation
  - schema[vars] # Enforce variable schema validation
  - schema[meta] # Enforce meta schema validation
  - name[play] # Enforce play naming
  - name[task] # Enforce task naming (as error, not warning)
  - no-handler # Ensure handlers are used properly
  - no-jinja-when # Avoid Jinja2 in when statements

# File paths to exclude from linting
exclude_paths:
  - .venv/ # Virtual environments (if any)
  - .git/ # Git directory
  - .github/ # GitHub workflows (if any)
  - .cache/ # Cache directories
  - "**/.DS_Store" # macOS system files
  - "**/*.retry" # Ansible retry files
  - ".ansible_facts_cache/" # Facts cache directory
  - "**/molecule/**" # Molecule test scenarios
  - "molecule/**" # Molecule test scenarios
  - tests/ # Test directories

# Enhanced file type detection for better linting
kinds:
  - playbook: "**/playbooks/**/*.yml"
  - playbook: "**/playbooks/**/*.yaml"
  - tasks: "**/tasks/**/*.yml"
  - tasks: "**/tasks/**/*.yaml"
  - handlers: "**/handlers/**/*.yml"
  - handlers: "**/handlers/**/*.yaml"
  - vars: "**/vars/**/*.yml"
  - vars: "**/vars/**/*.yaml"
  - defaults: "**/defaults/**/*.yml"
  - defaults: "**/defaults/**/*.yaml"
  - meta: "**/meta/**/*.yml"
  - meta: "**/meta/**/*.yaml"
  - inventory: "**/inventories/**/*.yml"
  - inventory: "**/inventories/**/*.yaml"
  - requirements: "**/requirements.yml"
  - requirements: "**/requirements.yaml"
  - yaml: "**/*.yml.j2" # Jinja2 templates
  - yaml: "**/*.yaml.j2" # Jinja2 templates

# Mock modules for collections that might not be installed locally
mock_modules:
  - community.general.modprobe
  - community.general.proxmox_vm
  - community.general.proxmox_kvm
  - community.docker.docker_compose_v2
  - community.docker.docker_compose
  - community.docker.docker_container
  - community.general.docker_network
  - community.general.docker_volume
  - ansible.posix.sysctl

# Mock roles for testing
mock_roles:
  - geerlingguy.docker
  - geerlingguy.security

# Performance and behavior settings
verbosity: 1 # Moderate verbosity for useful output
offline: false # Enable for better collection detection
use_default_rules: true
progressive: true # Show progress bar for better UX
strict: true # Strict mode for enterprise environments

# Task name formatting requirements
task_name_prefix: "{stem} | " # Enforce consistent task naming

# Variable naming patterns
var_naming_pattern: "^[a-z_][a-z0-9_]*$"
# Note: Line length is handled by yamllint (120 chars)
# Collections should be installed via requirements.yml
# Example collections to use:
#   - community.general
#   - community.docker
#   - ansible.posix
#   - ansible.utils

# Things which should not be implemented since they are not correct:
# write_list: # Create list of files to be fixed
#   - all

# # Documentation: https://ansible.readthedocs.io/projects/lint/configuring/
