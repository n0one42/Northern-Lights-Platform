---
# ansible/roles/docker_provisioning/playbook.example.yml
# Example playbook demonstrating Docker provisioning role usage

##############################################################################
#                           EXAMPLE PLAYBOOK                                #
#                     Docker Provisioning Role Usage                        #
##############################################################################

- name: Provision Docker on target hosts
  hosts: docker_hosts # Or use specific groups like 'prod', 'dev', etc.
  become: true
  gather_facts: true

  # Pre-tasks for any setup required before role execution
  pre_tasks:
    - name: Ensure system is updated (optional)
      ansible.builtin.apt:
        update_cache: true
        cache_valid_time: 3600
      when: ansible_os_family == "Debian"
      tags: [system_update]

    - name: Display provisioning information
      ansible.builtin.debug:
        msg: |
          Starting Docker provisioning for {{ inventory_hostname }}
          Security Model: Three-Pillar Defense-in-Depth
          - Host-Container Isolation: userns-remap enabled
          - Container-Container Isolation: Named Volumes enforced
          - Intra-Container Security: Non-root user (UID 1337)
      tags: [always]

  # Role execution
  roles:
    - role: docker_provisioning
      tags: [docker]

  # Post-tasks for verification and reporting
  post_tasks:
    - name: Verify Docker installation
      ansible.builtin.command: docker version --format json
      register: docker_version_output
      changed_when: false
      tags: [verify]

    - name: Display Docker version information
      ansible.builtin.debug:
        var: docker_version_output.stdout | from_json
      tags: [verify]

    - name: Test container execution with security features
      community.docker.docker_container:
        name: security_test
        image: alpine:latest
        command: "id"
        detach: false
        cleanup: true
        auto_remove: true
      register: security_test_output
      tags: [test]

    - name: Display security test results
      ansible.builtin.debug:
        msg: |
          Security test completed successfully
          Container ran with mapped user namespace
      when: security_test_output is succeeded
      tags: [test]

    - name: Generate provisioning report
      ansible.builtin.set_fact:
        provisioning_report:
          host: "{{ inventory_hostname }}"
          docker_version: "{{ docker_version_output.stdout | from_json }}"
          security_features:
            userns_remap: "{{ docker_provisioning_enable_userns_remap | default(true) }}"
            named_volumes_only: true
            container_uid: 1337
          directories_created:
            - /opt/docker/volumes
            - /opt/docker/data
            - /opt/docker/compose
            - /opt/docker/config
            - /opt/docker/logs
            - /opt/docker/scripts
            - /opt/docker/backups
          timestamp: "{{ ansible_date_time.iso8601 }}"
      tags: [report]

    - name: Display provisioning report
      ansible.builtin.debug:
        var: provisioning_report
      tags: [report]
##############################################################################
#                          USAGE EXAMPLES                                   #
##############################################################################

# Basic usage:
# ansible-playbook -i inventories/hosts.yml playbook.example.yml

# Target specific environment:
# ansible-playbook -i inventories/hosts.yml playbook.example.yml -l prod

# Run only Docker role tasks:
# ansible-playbook -i inventories/hosts.yml playbook.example.yml --tags docker

# Run verification only:
# ansible-playbook -i inventories/hosts.yml playbook.example.yml --tags verify

# Dry run (check mode):
# ansible-playbook -i inventories/hosts.yml playbook.example.yml --check

# With custom variables:
# ansible-playbook -i inventories/hosts.yml playbook.example.yml \
#   -e docker_provisioning_storage_driver=zfs \
#   -e docker_provisioning_enable_metrics=true

##############################################################################
#                      REQUIRED VARIABLES                                   #
##############################################################################

# The following variables MUST be defined in group_vars or host_vars:
#
# docker_provisioning_version: "latest"  # Or specific version like "24.0.7"
# docker_provisioning_compose_version: "2.23.0"
# docker_provisioning_storage_driver: "overlay2"  # Or "zfs", "btrfs"
# docker_provisioning_data_root: "/opt/docker"
# docker_provisioning_log_driver: "json-file"
# docker_provisioning_log_opts:
#   max-size: "10m"
#   max-file: "3"
# docker_provisioning_enable_userns_remap: true
# docker_provisioning_userns_remap: "dockremap:dockremap"
# docker_provisioning_default_address_pools:
#   - base: "172.17.0.0/12"
#     size: 24
# docker_provisioning_enable_metrics: false
# docker_provisioning_metrics_addr: "127.0.0.1:9323"
# docker_provisioning_enable_experimental: false
# docker_provisioning_enable_debug: false
# docker_provisioning_container_default_user: "app"
# docker_provisioning_container_default_uid: 1337
# docker_provisioning_container_default_gid: 1337
