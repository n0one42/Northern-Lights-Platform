# ansible/roles/docker_provisioning/tasks/daemon_config.yml
---
# * ---------------------------------------------------------------------------------------- * #
# ?                        Docker Provisioning Role - Daemon Configuration                    * #
# * ---------------------------------------------------------------------------------------- * #
#
# This file configures the Docker daemon with security-first settings per ADR-001.
# Implements all three security pillars through daemon.json configuration.
# Optimized to only restart Docker when configuration actually changes.

# * ---------------------------------------------------------------------------------------- * #
# ?                                    Pre-Configuration Setup                                * #
# * ---------------------------------------------------------------------------------------- * #

- name: Ensure Docker configuration directory exists
  ansible.builtin.file:
    path: /etc/docker
    state: directory
    owner: root
    group: root
    mode: "0755"

- name: Check if daemon.json already exists
  ansible.builtin.stat:
    path: /etc/docker/daemon.json
  register: docker_provisioning_daemon_existing

# Debug: Check if backup is needed
- name: Check for recent daemon.json backup
  ansible.builtin.find:
    paths: "{{ docker_provisioning_docker_root }}/backups"
    patterns: "daemon.json.*"
    age: "-1h" # Less than 1 hour old
  register: docker_provisioning_recent_backups
  when: docker_provisioning_daemon_existing.stat.exists | default(false) | bool

- name: Debug - Show backup status
  ansible.builtin.debug:
    msg: |
      Daemon.json exists: {{ docker_provisioning_daemon_existing.stat.exists | default(false) }}
      Recent backups found: {{ docker_provisioning_recent_backups.files | default([]) | length }}
      Backup directory: {{ docker_provisioning_docker_root }}/backups
    verbosity: 1
  when: docker_provisioning_daemon_existing.stat.exists | default(false) | bool

- name: Backup existing daemon configuration if present
  ansible.builtin.copy:
    src: /etc/docker/daemon.json
    dest: "{{ docker_provisioning_docker_root }}/backups/daemon.json.{{ ansible_date_time.epoch }}"
    remote_src: true
    owner: root
    group: root
    mode: "0600"
  when:
    - docker_provisioning_daemon_existing.stat.exists | default(false) | bool
    - docker_provisioning_recent_backups.files | default([]) | length == 0 # Only backup if no recent backup exists

# * ---------------------------------------------------------------------------------------- * #
# ?                                    Configuration Comparison                               * #
# * ---------------------------------------------------------------------------------------- * #

- name: Read current daemon.json if it exists
  ansible.builtin.slurp:
    src: /etc/docker/daemon.json
  register: docker_provisioning_current_daemon_raw
  when: docker_provisioning_daemon_existing.stat.exists | default(false)

- name: Parse current daemon.json
  ansible.builtin.set_fact:
    docker_provisioning_current_daemon: "{{ docker_provisioning_current_daemon_raw.content | b64decode | from_json }}"
  when: docker_provisioning_current_daemon_raw is defined and docker_provisioning_current_daemon_raw.content is defined

- name: Check if daemon configuration needs update
  ansible.builtin.set_fact:
    docker_provisioning_daemon_update_required: >-
      {{
        docker_provisioning_daemon_needs_update | default(true)
        or (docker_provisioning_current_daemon | default({}) != docker_provisioning_desired_daemon_config)
      }}

# * ---------------------------------------------------------------------------------------- * #
# ?                                    Deploy Daemon Configuration                            * #
# * ---------------------------------------------------------------------------------------- * #

- name: Deploy Docker daemon.json configuration
  ansible.builtin.template:
    src: daemon.json.j2
    dest: /etc/docker/daemon.json
    owner: root
    group: root
    mode: "0644"
    backup: true
    validate: python3 -m json.tool %s
  register: docker_provisioning_daemon_deployed
  when: docker_provisioning_daemon_update_required | default(true)
  notify:
    - Restart docker
    - Wait for Docker daemon

- name: Skip daemon configuration update (already up-to-date)
  ansible.builtin.debug:
    msg: "Docker daemon.json is already up-to-date, skipping update"
  when: not docker_provisioning_daemon_update_required | default(true)

# * ---------------------------------------------------------------------------------------- * #
# ?                                    Systemd Service Configuration                          * #
# * ---------------------------------------------------------------------------------------- * #

- name: Create systemd drop-in directory for Docker
  ansible.builtin.file:
    path: /etc/systemd/system/docker.service.d
    state: directory
    owner: root
    group: root
    mode: "0755"

- name: Check existing Docker systemd override
  ansible.builtin.stat:
    path: /etc/systemd/system/docker.service.d/override.conf
  register: docker_provisioning_systemd_override_existing

- name: Configure Docker systemd service overrides
  ansible.builtin.copy:
    content: |
      # Docker service configuration drop-in
      # Managed by Ansible - docker_provisioning role
      [Service]
      # Security hardening
      NoNewPrivileges=true
      ReadWritePaths={{ docker_provisioning_data_root }} /var/run/docker.sock

      # Resource limits
      LimitNOFILE=1048576
      LimitNPROC=infinity
      LimitCORE=infinity

      # Restart policy
      Restart=always
      RestartSec=10s

      # Startup configuration
      TimeoutStartSec=0
      TimeoutStopSec=30s

      # OOM score adjustment (less likely to be killed)
      OOMScoreAdjust=-500
    dest: /etc/systemd/system/docker.service.d/override.conf
    owner: root
    group: root
    mode: "0644"
  register: docker_provisioning_systemd_override
  when: not docker_provisioning_systemd_override_existing.stat.exists | default(false)
  notify:
    - Reload systemd
    - Restart docker
    - Wait for Docker daemon

# * ---------------------------------------------------------------------------------------- * #
# ?                                    Conditional Service Restart                            * #
# * ---------------------------------------------------------------------------------------- * #

- name: Reload systemd daemon if configuration changed # noqa: no-handler
  ansible.builtin.systemd:
    daemon_reload: true
  when:
    - docker_provisioning_daemon_deployed.changed | default(false) | bool or docker_provisioning_systemd_override.changed | default(false) | bool
    - docker_provisioning_is_installed | default(false)

- name: Ensure Docker service is started and enabled
  ansible.builtin.systemd:
    name: docker
    state: started
    enabled: true
    daemon_reload: true
  register: docker_provisioning_service_start
  retries: 3
  delay: 10
  until: docker_provisioning_service_start is not failed
  when: docker_provisioning_is_installed | default(false)

- name: Restart Docker only if configuration changed # noqa: no-handler
  ansible.builtin.systemd:
    name: docker
    state: restarted
  when:
    - docker_provisioning_daemon_deployed.changed | default(false) | bool
    - docker_provisioning_is_installed | default(false)
    - docker_provisioning_is_running | default(false)
  register: docker_provisioning_docker_restarted

- name: Wait for Docker socket after restart # noqa: no-handler
  ansible.builtin.wait_for:
    path: /var/run/docker.sock
    state: present
    timeout: 30
  when: docker_provisioning_docker_restarted.changed | default(false) | bool

# * ---------------------------------------------------------------------------------------- * #
# ?                                    Verify Daemon Configuration                            * #
# * ---------------------------------------------------------------------------------------- * #

- name: Check Docker daemon status after configuration
  ansible.builtin.systemd:
    name: docker.service
  register: docker_provisioning_daemon_status_raw
  when: docker_provisioning_is_installed | default(false)

# Debug the structure to understand what we're getting
- name: Debug raw systemd status structure
  ansible.builtin.debug:
    var: docker_provisioning_daemon_status_raw
    verbosity: 1
  when:
    - docker_provisioning_daemon_status_raw is defined
    - docker_provisioning_is_installed | default(false)

# Alternative method to get service status with proper structure
- name: Get Docker service facts
  ansible.builtin.service_facts:
  register: docker_provisioning_service_facts
  when: docker_provisioning_is_installed | default(false)

- name: Debug service facts structure
  ansible.builtin.debug:
    msg: "Docker service state from service_facts: {{ ansible_facts.services['docker.service'].state | default('unknown') }}"
    verbosity: 1
  when:
    - docker_provisioning_is_installed | default(false)
    - ansible_facts.services is defined

# Set a normalized status variable
- name: Set Docker daemon status from service facts
  ansible.builtin.set_fact:
    docker_provisioning_daemon_status:
      active: "{{ ansible_facts.services['docker.service'].state == 'running' if 'docker.service' in ansible_facts.services else false }}"
      state: "{{ ansible_facts.services['docker.service'].state | default('unknown') if 'docker.service' in ansible_facts.services else 'not-found' }}"
  when:
    - docker_provisioning_is_installed | default(false)
    - ansible_facts.services is defined

- name: Debug Docker service status if not active
  ansible.builtin.debug:
    msg: |
      Docker service status: {{ docker_provisioning_daemon_status.state | default('unknown') }}
      Docker service active: {{ docker_provisioning_daemon_status.active | default(false) }}
      If Docker failed to start, check:
      - sudo journalctl -xeu docker.service
      - sudo cat /etc/docker/daemon.json
      - Verify dockremap user exists with proper subordinate UID/GID ranges
  when:
    - docker_provisioning_daemon_status is defined
    - not (docker_provisioning_daemon_status.active | default(false) | bool)

- name: Verify Docker daemon is running with correct configuration
  ansible.builtin.command:
    cmd: docker info --format json
  register: docker_provisioning_daemon_info
  changed_when: false
  failed_when: false
  when:
    - docker_provisioning_daemon_status is defined
    - docker_provisioning_daemon_status.active | default(false) | bool

- name: Parse daemon information
  ansible.builtin.set_fact:
    docker_daemon_info: "{{ docker_provisioning_daemon_info.stdout | from_json }}"
  when:
    - docker_provisioning_daemon_info is defined
    - docker_provisioning_daemon_info.rc is defined
    - docker_provisioning_daemon_info.rc == 0
    - docker_provisioning_daemon_info.stdout is defined
    - docker_provisioning_daemon_info.stdout | length > 0

- name: Assert critical security settings are active
  ansible.builtin.assert:
    that:
      - "'name=userns' in docker_daemon_info.SecurityOptions or 'userns' in docker_daemon_info.SecurityOptions"
      - "docker_daemon_info.DockerRootDir == docker_provisioning_data_root or docker_daemon_info.DockerRootDir.startswith(docker_provisioning_data_root + '/')"
      - "docker_daemon_info.Driver == docker_provisioning_storage_driver"
      - "not (docker_daemon_info.IPv6 | default(false) | bool)"
    fail_msg: |
      Docker daemon security configuration verification failed.
      Please check /etc/docker/daemon.json and ensure all security settings are applied.
      Common issues:
      - dockremap user not properly configured
      - Subordinate UID/GID ranges not set in /etc/subuid and /etc/subgid
      - Bridge IP conflict with existing networks
    success_msg: "✓ Docker daemon security configuration verified successfully"
  when: docker_daemon_info is defined

- name: Display daemon configuration summary
  ansible.builtin.debug:
    msg: |
      === Docker Daemon Configuration ===
      Configuration Update Required: {{ docker_provisioning_daemon_update_required | default(false) }}
      Docker Restarted: {{ docker_provisioning_docker_restarted.changed | default(false) }}
      {% if docker_daemon_info is defined %}
      Storage Driver: {{ docker_daemon_info.Driver | default('N/A') }}
      Data Root: {{ docker_daemon_info.DockerRootDir | default('N/A') }}
      User Namespace Remapping: {{ 'userns' in docker_daemon_info.SecurityOptions | default([]) }}
      Bridge Network: {{ docker_provisioning_docker_bip }}
      IPv6 Support: {{ docker_daemon_info.IPv6 | default(false) | bool }}
      Live Restore: {{ docker_daemon_info.LiveRestoreEnabled | default(false) | bool }}
      {% else %}
      Docker daemon information not available
      {% endif %}
  when: docker_provisioning_execution_path != 'validation_only'
