# ansible/roles/docker_provisioning/tasks/validation.yml
---
# * ---------------------------------------------------------------------------------------- * #
# ?                      Docker Provisioning Role - Post-Installation Validation              * #
# * ---------------------------------------------------------------------------------------- * #
#
# This file validates the complete Docker installation against ADR-001 requirements.
# Verifies all three security pillars are correctly implemented.

# * --------------------------------------------------------------------- * #
# ?                            Basic Docker Validation                      * #
# * ---------------------------------------------------------------------------------------- * #

- name: Verify Docker is installed and running
  ansible.builtin.command:
    cmd: docker version --format json
  register: docker_provisioning_version_check
  changed_when: false
  failed_when: docker_provisioning_version_check.rc != 0

- name: Verify Docker Compose plugin is installed
  ansible.builtin.command:
    cmd: docker compose version
  register: docker_provisioning_compose_check
  changed_when: false
  failed_when: docker_provisioning_compose_check.rc != 0

# * ---------------------------------------------------------------------------------------- * #
# ?                            Pillar 1: Host-Container Isolation Validation                  * #
# * ---------------------------------------------------------------------------------------- * #

- name: Get Docker security configuration
  ansible.builtin.command:
    cmd: docker info --format json
  register: docker_provisioning_info_raw
  changed_when: false

- name: Parse Docker information
  ansible.builtin.set_fact:
    docker_validation_info: "{{ docker_provisioning_info_raw.stdout | from_json }}"

# Debug: Check what's actually in SecurityOptions
- name: Debug Docker security options
  ansible.builtin.debug:
    msg:
      - "=== Docker Security Configuration Debug ==="
      - "SecurityOptions: {{ docker_validation_info.SecurityOptions | default([]) }}"
      - "DockerRootDir: {{ docker_validation_info.DockerRootDir | default('N/A') }}"
      - "Expected data-root: {{ docker_provisioning_data_root }}"
    verbosity: 0 # Always show this for debugging

# Debug: Check daemon.json on disk
- name: Read current daemon.json from disk
  ansible.builtin.slurp:
    src: /etc/docker/daemon.json
  register: docker_provisioning_daemon_json_debug

- name: Display daemon.json content
  ansible.builtin.debug:
    msg:
      - "=== Current daemon.json on disk ==="
      - "{{ docker_provisioning_daemon_json_debug.content | b64decode | from_json | to_nice_json }}"
    verbosity: 0

# Debug: Check if dockremap user and subordinate ranges exist
- name: Check if dockremap user exists
  ansible.builtin.command:
    cmd: id {{ docker_provisioning_dockremap_user }}
  register: docker_provisioning_dockremap_id
  changed_when: false
  failed_when: false

- name: Check subordinate UID configuration
  ansible.builtin.command:
    cmd: grep "^{{ docker_provisioning_dockremap_user }}:" /etc/subuid
  register: docker_provisioning_subuid_debug
  changed_when: false
  failed_when: false

- name: Check subordinate GID configuration
  ansible.builtin.command:
    cmd: grep "^{{ docker_provisioning_dockremap_user }}:" /etc/subgid
  register: docker_provisioning_subgid_debug
  changed_when: false
  failed_when: false

- name: Display userns-remap prerequisites
  ansible.builtin.debug:
    msg:
      - "=== userns-remap Prerequisites ==="
      - "Dockremap user exists: {{ docker_provisioning_dockremap_id.rc == 0 }}"
      - "User ID output: {{ docker_provisioning_dockremap_id.stdout | default('User not found') }}"
      - "Subuid entry: {{ docker_provisioning_subuid_debug.stdout | default('Not configured') }}"
      - "Subgid entry: {{ docker_provisioning_subgid_debug.stdout | default('Not configured') }}"
    verbosity: 0

# Check Docker service status and if it needs restart
- name: Check Docker service status
  ansible.builtin.systemd:
    name: docker.service
  register: docker_service_status_debug

- name: Display Docker service status
  ansible.builtin.debug:
    msg:
      - "=== Docker Service Status ==="
      - "State: {{ ansible_facts.services['docker.service'].state | default('unknown') }}"
      - "Note: If daemon.json was recently updated, Docker may need to be restarted"
    verbosity: 0

- name: Validate Pillar 1 - userns-remap enabled
  ansible.builtin.assert:
    that:
      - "'name=userns' in docker_validation_info.SecurityOptions or 'userns' in docker_validation_info.SecurityOptions"
      - "docker_validation_info.DockerRootDir == docker_provisioning_data_root or docker_validation_info.DockerRootDir.startswith(docker_provisioning_data_root + '/')"
    fail_msg: |
      CRITICAL: Pillar 1 validation failed!
      userns-remap MUST be enabled per ADR-001.

      Current SecurityOptions: {{ docker_validation_info.SecurityOptions | default([]) }}

      Troubleshooting steps:
      1. Check if dockremap user exists: id dockremap
      2. Check /etc/subuid and /etc/subgid entries
      3. Verify /etc/docker/daemon.json has "userns-remap": "dockremap"
      4. Restart Docker: sudo systemctl restart docker
      5. Check Docker logs: sudo journalctl -xeu docker.service

      Common issues:
      - Docker needs restart after daemon.json update
      - Subordinate UID/GID ranges not properly configured
      - Permissions issues with /etc/subuid or /etc/subgid
    success_msg: "✓ Pillar 1: Host-Container Isolation active (userns-remap enabled)"

- name: Verify subordinate UID/GID configuration
  ansible.builtin.shell: |
    grep "^{{ docker_provisioning_dockremap_user }}:{{ docker_provisioning_subordinate_uid_start }}:{{ docker_provisioning_subordinate_range_size }}$" /etc/subuid && \
    grep "^{{ docker_provisioning_dockremap_user }}:{{ docker_provisioning_subordinate_uid_start }}:{{ docker_provisioning_subordinate_range_size }}$" /etc/subgid
  register: docker_provisioning_subid_check
  changed_when: false
  failed_when: docker_provisioning_subid_check.rc != 0

# * ---------------------------------------------------------------------------------------- * #
# ?                          Pillar 2: Container-Container Isolation Validation               * #
# * ---------------------------------------------------------------------------------------- * #

- name: Verify directory structure exists with correct permissions
  ansible.builtin.stat:
    path: "{{ item.path }}"
  register: docker_provisioning_dir_stats
  loop:
    - { path: "{{ docker_provisioning_docker_root }}", expected_mode: "0755" }
    - { path: "{{ docker_provisioning_data_root }}", expected_mode: "0701" }
    - { path: "{{ docker_provisioning_services_dir }}", expected_mode: "0750" }
    - { path: "{{ docker_provisioning_secrets_dir }}", expected_mode: "0700" }
    - { path: "{{ docker_provisioning_logs_dir }}", expected_mode: "0755" }

- name: Validate Pillar 2 - Directory ownership
  ansible.builtin.assert:
    that:
      - item.stat.exists
      - item.stat.isdir
      - item.stat.uid == 0 # root
      # Accept either root GID (0) or subordinate GID (500000) for data directory when userns-remap is active
      - item.stat.gid == 0 or (item.item.path == docker_provisioning_data_root and item.stat.gid == docker_provisioning_subordinate_uid_start | int)
    fail_msg: |
      Directory {{ item.item.path }} does not meet security requirements
      UID: {{ item.stat.uid }} (expected: 0)
      GID: {{ item.stat.gid }} (expected: 0 or {{ docker_provisioning_subordinate_uid_start }} for data directory with userns-remap)
    success_msg: "✓ Directory {{ item.item.path | basename }} validated"
  loop: "{{ docker_provisioning_dir_stats.results }}"
  loop_control:
    label: "{{ item.item.path }}"

- name: Check inter-container communication is disabled
  ansible.builtin.assert:
    that:
      # BridgeNfIcc field may not exist in docker info, check daemon config instead
      # If BridgeNfIcc exists, it should be false; if it doesn't exist, that's also acceptable
      - not (docker_validation_info.BridgeNfIcc | default(false))
    fail_msg: |
      Inter-container communication (ICC) check:
      BridgeNfIcc value: {{ docker_validation_info.BridgeNfIcc | default('field not present') }}
      Note: ICC is configured as disabled in daemon.json (icc: false)
      This validation may be a false positive if the field is not present in docker info
    success_msg: "✓ Pillar 2: ICC disabled for container isolation (configured in daemon.json)"

# * ---------------------------------------------------------------------------------------- * #
# ?                           Pillar 3: Intra-Container Security Validation                   * #
# * ---------------------------------------------------------------------------------------- * #

- name: Validate standard container UID configuration
  ansible.builtin.assert:
    that:
      - docker_provisioning_container_internal_uid is defined
      - docker_provisioning_container_internal_uid | int == 1337
    fail_msg: "Container UID must be 1337 per ADR-001"
    success_msg: "✓ Pillar 3: Standard container UID {{ docker_provisioning_container_internal_uid }} configured"

- name: Verify UID mapping calculation
  ansible.builtin.set_fact:
    calculated_host_uid: "{{ docker_provisioning_subordinate_uid_start | int + docker_provisioning_container_internal_uid | int }}"

- name: Display UID mapping
  ansible.builtin.debug:
    msg: "Container UID {{ docker_provisioning_container_internal_uid }} → Host UID {{ calculated_host_uid }}"

# * ---------------------------------------------------------------------------------------- * #
# ?                                    Security Features Validation                           * #
# * ---------------------------------------------------------------------------------------- * #

- name: Validate daemon.json security settings
  ansible.builtin.slurp:
    src: /etc/docker/daemon.json
  register: docker_provisioning_daemon_raw

- name: Parse daemon.json
  ansible.builtin.set_fact:
    daemon_config: "{{ docker_provisioning_daemon_raw.content | b64decode | from_json }}"

- name: Assert critical security settings in daemon.json
  ansible.builtin.assert:
    that:
      - daemon_config['userns-remap'] == docker_provisioning_dockremap_user
      - daemon_config['data-root'] == docker_provisioning_data_root
      - daemon_config['no-new-privileges'] | default(false)
      - not daemon_config['icc'] | default(true)
      - not daemon_config['ipv6'] | default(false)
    fail_msg: "daemon.json missing critical security settings"
    success_msg: "✓ daemon.json security settings verified"

# * ---------------------------------------------------------------------------------------- * #
# ?                                    Compliance Check Execution                             * #
# * ---------------------------------------------------------------------------------------- * #

- name: Execute security compliance check script
  ansible.builtin.command:
    cmd: "{{ docker_provisioning_docker_root }}/scripts/security-compliance-check.sh"
  register: docker_provisioning_compliance_result
  changed_when: false
  failed_when: docker_provisioning_compliance_result.rc > 1

# * ---------------------------------------------------------------------------------------- * #
# ?                                    Final Validation Summary                               * #
# * ---------------------------------------------------------------------------------------- * #

- name: Display comprehensive validation summary
  ansible.builtin.debug:
    msg: |
      ╔════════════════════════════════════════════════════════════╗
      ║       Docker Provisioning Validation Complete              ║
      ╠════════════════════════════════════════════════════════════╣
      ║ ADR-001 Three Pillars Security Model:                      ║
      ║   ✓ Pillar 1: Host-Container Isolation (userns-remap)      ║
      ║   ✓ Pillar 2: Container-Container Isolation (Named Volumes)║
      ║   ✓ Pillar 3: Intra-Container Security (UID 1337)          ║
      ╠════════════════════════════════════════════════════════════╣
      ║ Security Configuration:                                    ║
      ║   • Dockremap User: {{ '%-36s' | format(docker_provisioning_dockremap_user) }}   ║
      ║   • Container UID {{ docker_provisioning_container_internal_uid }} → Host UID {{ '%-24s' | format(calculated_host_uid) }} ║
      ║   • Data Root: {{ '%-41s' | format(docker_provisioning_data_root) }}   ║
      ║   • ICC Disabled: ✓                                        ║
      ║   • IPv6 Disabled: ✓                                       ║
      ╠════════════════════════════════════════════════════════════╣
      ║ Result: ✅ PASSED - Full ADR-001 Compliance                ║
      ╚════════════════════════════════════════════════════════════╝

- name: Create validation timestamp
  ansible.builtin.file:
    path: "{{ docker_provisioning_docker_root }}/.validation_complete"
    state: touch
    owner: root
    group: root
    mode: "0644"

- name: Assert validation success
  ansible.builtin.assert:
    that:
      # Host setup is required
      - docker_provisioning_host_setup_complete | default(false)
      # Filesystem setup may be skipped in certain scenarios (e.g., when directories already exist)
      - docker_provisioning_filesystem_complete | default(false) or docker_provisioning_skip_filesystem | default(false)
      # userns-remap must be enabled
      - "'name=userns' in docker_validation_info.SecurityOptions or 'userns' in docker_validation_info.SecurityOptions"
    fail_msg: |
      Docker provisioning validation failed:
      - Host setup complete: {{ docker_provisioning_host_setup_complete | default(false) }}
      - Filesystem complete: {{ docker_provisioning_filesystem_complete | default(false) }} (skipped: {{ docker_provisioning_skip_filesystem | default(false) }})
      - userns-remap enabled: {{ 'name=userns' in docker_validation_info.SecurityOptions or 'userns' in docker_validation_info.SecurityOptions }}
    success_msg: "✅ Docker provisioning validated successfully - ADR-001 compliant!"
